#! /usr/bin/python3

import hashlib
import os
import json
import datetime
import re
import sys


class ManifestLog():
    def __init__(self, base_directory):
        self.base_directory = base_directory
        self.manifest_path = os.path.join(base_directory, MANIFEST_ROOT)
        self.manifest_exists = True
        self.hash_mismatches = []
        self.manifest_folders = []
        self.manifest_folders_with_manifest_file = []
        self.manifest_folders_with_no_manifest_file = []
        self.unrecorded_files = []
        self.unrecorded_folders = []
        self.recorded_but_missing_files = []
        self.recorded_but_missing_folders = []


def hashfile(filepath, blocksize = 65536):
    hash_obj = hashlib.sha256()
    with open(filepath, 'rb') as f:
        chunk = f.read(blocksize)
        while len(chunk):
            hash_obj.update(chunk)
            chunk = f.read(blocksize)
    return(hash_obj.hexdigest())


def check_date():
    if len(sys.argv) != 2:
        error_msg()
    dateRegex = re.compile(r'[1-2]\d\d\d-[0-1]\d-[0-3]\d')
    matchObject = dateRegex.search(sys.argv[1])
    if matchObject:
        date = matchObject.group()
    else:
        error_msg()
    if date != sys.argv[1]:
        error_msg()
    year, month, day = date.split('-')
    try:
        datetime.datetime(int(year), int(month), int(day))
    except ValueError:
        error_msg()
    return date


def error_msg():
    print("Usage: check_manifests YYYY-MM-DD")
    sys.exit()


def walk_manifest(log):
    for folder_name, subfolders, filenames in os.walk(MANIFEST_ROOT):
        log.manifest_folders.append(folder_name)
        if MANIFEST_FILENAME in filenames:
            log.manifest_folders_with_manifest_file.append(folder_name)
        else:
            log.manifest_folders_with_no_manifest_file.append(folder_name)


def log_filepaths_as_unrecorded(relative_path, filenames):
    for filename in filenames:
        filepath = os.path.join(relative_path, filename)
        log.unrecorded_files.append(filepath)


def walk_base_directory(log):
    for folder_name, subfolders, filenames in os.walk(log.base_directory):
        relative_path = os.path.relpath(folder_name, log.base_directory)
        if relative_path.startswith(MANIFEST_ROOT):
            continue
        if relative_path == ".":
            manifest_path = MANIFEST_ROOT
        else:
            manifest_path = os.path.join(MANIFEST_ROOT, relative_path)
        if manifest_path not in log.manifest_folders:
            log.unrecorded_folders.append(relative_path)
            if len(filenames) > 0:
                log_filepaths_as_unrecorded(relative_path, filenames)
        if manifest_path in log.manifest_folders_with_no_manifest_file:
            if len(filenames) > 0:
                log_filepaths_as_unrecorded(relative_path, filenames)


def load_manifest(folder):
    filepath = os.path.join(folder, MANIFEST_FILENAME)
    with open(filepath, 'r') as f:
        manifest = json.load(f)
    return manifest


def check_file(manifest, folder, log):
    for filename in manifest:
        filepath = os.path.join(folder, filename)
        if os.path.isfile(filepath):
            manifest_hash = manifest[filename]
            file_hash = hashfile(filepath)
            if manifest_hash != file_hash:
                log.hash_mismatches.append(filepath)
        else:
            log.recorded_but_missing_files.append(filepath)
    with os.scandir(folder) as it:
        for entry in it:
            if entry.is_file() and entry.name not in manifest:
                filepath = os.path.join(folder, entry.name)
                log.unrecorded_files.append(filepath)


def check_manifest_files(log):
    for folder in log.manifest_folders_with_manifest_file:
        manifest = load_manifest(folder)
        matching_folder = os.path.relpath(folder, MANIFEST_ROOT)
        if not os.path.isdir(matching_folder):
            log.recorded_but_missing_folders.append(matching_folder)
        check_file(manifest, matching_folder, log)


def check_manifest(log):
    if not os.path.exists(log.manifest_path):
        log.manifest_exists = False
        return
    walk_manifest(log)
    walk_base_directory(log)
    check_manifest_files(log)


date = check_date()

MANIFEST_ROOT = '.manifest'
MANIFEST_FILENAME = f"{date}.json"
cwd = os.getcwd()

log = ManifestLog(cwd)

check_manifest(log)

print(f"Manifest exists: {log.manifest_exists}")
print(f"Manifest folders: {log.manifest_folders}")
print(f"Manifest folders with manifest file: {log.manifest_folders_with_manifest_file}")
print(f"Manifest folders with no manifest file: {log.manifest_folders_with_no_manifest_file}")
print(f"Unrecorded folders: {log.unrecorded_folders}")
print(f"Unrecorded files: {log.unrecorded_files}")
print(f"Recorded but missing folders: {log.recorded_but_missing_folders}")
print(f"Recorded but missing files: {log.recorded_but_missing_files}")
print(f"Hash mismatches: {log.hash_mismatches}")
